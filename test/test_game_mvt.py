from game_chess.game_mvt import *
from game_chess.board import *


def test_mvt_tour_pos():
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

    assert (mvt_tour_poss(board, (7, 0), (2, 0)))
    assert (mvt_tour_poss(board, (7, 0), (1, 0)))
    assert not (mvt_tour_poss(board, (7, 0), (0, 0)))
    assert not (mvt_tour_poss(board, (7, 0), (7, 1)))
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_tour_poss(board, (0, 0), (7, 0)))
    assert not (mvt_tour_poss(
        [['  ', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
         ['  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['Pn', 'Tn', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
         ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 1), (3, 0)))
    assert (mvt_tour_poss(
            [['  ', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Tn', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 1), (3, 5)))
    assert not (mvt_tour_poss(
        [['  ', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
         ['  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', 'Tn', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
         ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 1), (1, 1)))
    assert not (mvt_tour_poss(
        [['  ', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
         ['  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', 'Tn', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
         ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 1), (4, 2)))
    assert not (mvt_tour_poss(
        [['  ', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
         ['  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', 'Tn', '  ', 'Pn', '  ', '  ', '  ', '  '],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
         ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
         ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 1), (3, 5)))


def test_mvt_tour():
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

    assert (mvt_tour(board, (7, 0), (2, 0))) == [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
                                                 ['Pn', 'Pn', 'Pn', 'Pn',
                                                     'Pn', 'Pn', 'Pn', 'Pn'],
                                                 ['Tb', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', 'Pb', 'Pb', 'Pb',
                                                     'Pb', 'Pb', 'Pb', 'Pb'],
                                                 ['  ', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_tour(board, (7, 0), (1, 0))) == [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
                                                 ['Tb', 'Pn', 'Pn', 'Pn',
                                                     'Pn', 'Pn', 'Pn', 'Pn'],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', 'Pb', 'Pb', 'Pb',
                                                     'Pb', 'Pb', 'Pb', 'Pb'],
                                                 ['  ', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_tour(board, (7, 0), (7, 1))) == board
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_tour(board, (0, 0), (7, 0))) == board


def test_mvt_fou_poss():
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', 'Fb', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', '  ', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_fou_poss(board, (4, 2), (5, 1)))
    assert (mvt_fou_poss(board, (4, 2), (1, 5)))
    assert (mvt_fou_poss(board, (4, 2), (2, 4)))
    assert not (mvt_fou_poss(board, (4, 2), (6, 4)))
    assert not (mvt_fou_poss(board, (4, 2), (0, 6)))
    assert not (mvt_fou_poss(board, (4, 0), (7, 1)))


def test_mvt_fou():
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', 'Fb', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', '  ', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_fou(board, (4, 2), (5, 1))) == [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
                                                ['Pn', 'Pn', 'Pn', 'Pn',
                                                 'Pn', 'Pn', 'Pn', 'Pn'],
                                                ['  ', '  ', '  ', '  ',
                                                 '  ', '  ', '  ', '  '],
                                                ['  ', '  ', '  ', '  ',
                                                 '  ', '  ', '  ', '  '],
                                                ['  ', '  ', '  ', '  ',
                                                 '  ', '  ', '  ', '  '],
                                                ['  ', 'Fb', '  ', '  ',
                                                 '  ', '  ', '  ', '  '],
                                                ['  ', 'Pb', 'Pb', 'Pb',
                                                 'Pb', 'Pb', 'Pb', 'Pb'],
                                                ['Tb', 'Cb', '  ', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', 'Fb', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', '  ', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_fou(board, (4, 2), (1, 5))) == [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
                                                ['Pn', 'Pn', 'Pn', 'Pn',
                                                 'Pn', 'Fb', 'Pn', 'Pn'],
                                                ['  ', '  ', '  ', '  ',
                                                 '  ', '  ', '  ', '  '],
                                                ['  ', '  ', '  ', '  ',
                                                 '  ', '  ', '  ', '  '],
                                                ['  ', '  ', '  ', '  ',
                                                 '  ', '  ', '  ', '  '],
                                                ['  ', '  ', '  ', '  ',
                                                 '  ', '  ', '  ', '  '],
                                                ['  ', 'Pb', 'Pb', 'Pb',
                                                 'Pb', 'Pb', 'Pb', 'Pb'],
                                                ['Tb', 'Cb', '  ', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', 'Fb', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', '  ', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_fou(board, (4, 2), (0, 6))) == board
    assert (mvt_fou(board, (4, 0), (7, 1))) == board


def test_mvt_dame_poss():
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', 'Db', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_dame_poss(board, (4, 2), (5, 1)))
    assert (mvt_dame_poss(board, (4, 2), (1, 5)))
    assert (mvt_dame_poss(board, (4, 2), (2, 4)))
    assert (mvt_dame_poss(board, (4, 2), (4, 0)))
    assert (mvt_dame_poss(board, (4, 2), (1, 2)))
    assert not (mvt_dame_poss(board, (4, 2), (0, 2)))
    assert not (mvt_dame_poss(board, (4, 2), (6, 4)))
    assert not (mvt_dame_poss(board, (4, 2), (0, 6)))
    assert not (mvt_dame_poss(board, (4, 0), (7, 1)))
    assert not mvt_dame_poss([
        ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Db', '  ', 'Pb', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', '  ', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', '  ', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 2), (4, 4))
    assert not mvt_dame_poss([
        ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Db', '  ', 'Pn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', '  ', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 2), (6, 2))
    assert not mvt_dame_poss([
        ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Db', '  ', 'Pn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', '  ', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 2), (4, 6))


def test_mvt_dame():
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', 'Db', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_dame(board, (4, 2), (5, 1))) == [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
                                                 ['Pn', 'Pn', 'Pn', 'Pn',
                                                     'Pn', 'Pn', 'Pn', 'Pn'],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', 'Db', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', 'Pb', 'Pb', 'Pb',
                                                     'Pb', 'Pb', 'Pb', 'Pb'],
                                                 ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', 'Db', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_dame(board, (4, 2), (1, 5))) == [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
                                                 ['Pn', 'Pn', 'Pn', 'Pn',
                                                     'Pn', 'Db', 'Pn', 'Pn'],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', 'Pb', 'Pb', 'Pb',
                                                     'Pb', 'Pb', 'Pb', 'Pb'],
                                                 ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', 'Db', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_dame(board, (4, 2), (2, 4))) == [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
                                                 ['Pn', 'Pn', 'Pn', 'Pn',
                                                     'Pn', 'Pn', 'Pn', 'Pn'],
                                                 ['  ', '  ', '  ', '  ',
                                                     'Db', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', 'Pb', 'Pb', 'Pb',
                                                     'Pb', 'Pb', 'Pb', 'Pb'],
                                                 ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', 'Db', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_dame(board, (4, 2), (4, 0))) == [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
                                                 ['Pn', 'Pn', 'Pn', 'Pn',
                                                     'Pn', 'Pn', 'Pn', 'Pn'],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['Db', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', 'Pb', 'Pb', 'Pb',
                                                     'Pb', 'Pb', 'Pb', 'Pb'],
                                                 ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    board = [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
             ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', 'Db', '  ', '  ', '  ', '  ', '  '],
             ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
             ['  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
             ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_dame(board, (4, 2), (1, 2))) == [['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
                                                 ['Pn', 'Pn', 'Db', 'Pn',
                                                     'Pn', 'Pn', 'Pn', 'Pn'],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', '  ', '  ', '  ',
                                                     '  ', '  ', '  ', '  '],
                                                 ['  ', 'Pb', 'Pb', 'Pb',
                                                     'Pb', 'Pb', 'Pb', 'Pb'],
                                                 ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert (mvt_dame(board, (4, 2), (0, 2))) == board
    assert (mvt_dame(board, (4, 2), (6, 4))) == board
    assert (mvt_dame(board, (4, 2), (0, 6))) == board
    assert (mvt_dame(board, (4, 0), (7, 1))) == board


def test_mvt_cavalier_poss():
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 4), (3, 2)) == False
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 4), (5, 2)) == True
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 4), (2, 3)) == True
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 4), (2, 5)) == True
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 4), (3, 6)) == True
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 4), (5, 6)) == True
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 4), (6, 5)) == True
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 4), (6, 3)) == True
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (0, 6), (6, 3)) == False
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (0, 6), (2, 6)) == False
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (0, 6), (1, 6)) == False
    assert mvt_cavalier_poss([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Pb', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', '  ', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 4), (6, 3)) == True


def test_mvt_cavalier():
    assert mvt_cavalier([
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Pb', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', '  ', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (4, 4), (6, 3)) == [
        ['Tn', '  ', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Pb', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Cn', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]


board1 = [
    ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
    ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
    ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

board2 = [
    ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
    ['Pn', 'Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn'],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', 'Pn', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', 'Pb', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['Pb', 'Pb', 'Pb', 'Pb', '  ', 'Pb', 'Pb', 'Pb'],
    ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

board3 = [
    ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
    ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
    ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

board4 = [
    ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
    ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
    ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

board5 = [
    ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
    ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
    ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

board6 = [
    ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
    ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
    ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

board7 = [
    ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
    ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
    ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

board8 = [
    ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
    ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
    ['  ', '  ', '  ', 'Pb', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['Pb', 'Pb', 'Pb', '  ', 'Pb', 'Pb', 'Pb', 'Pb'],
    ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

board9 = [
    ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
    ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', 'Pb', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['Pb', 'Pb', 'Pb', '  ', 'Pb', 'Pb', 'Pb', 'Pb'],
    ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]

board10 = [
    ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
    ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
    ['  ', '  ', '  ', 'Pb', '  ', '  ', '  ', '  '],
    ['Pb', 'Pb', 'Pb', '  ', 'Pb', 'Pb', 'Pb', 'Pb'],
    ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]


def test_mvt_pion():
    assert mvt_pion(board1, (1, 2), (3, 2)) == [
        ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert mvt_pion(board1, (1, 2), (5, 2)) == board1
    assert mvt_pion(board7, (6, 7), (5, 7)) == [
        ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', 'Pb'],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', '  '],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert mvt_pion(board4, (6, 7), (4, 7)) == [
        ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', 'Pb'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', '  '],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert mvt_pion(board2, (4, 4), (3, 3)) == [
        ['Tn', 'Cn', 'Fn', 'Dn', 'Rn', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', 'Pb', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', '  ', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]
    assert mvt_pion(board2, (0, 7), (0, 6)) == board2
    assert mvt_pion(board3, (6, 2), (4, 2)) == board3
    assert mvt_pion(board8, (2, 3), (1, 2)) == board8
    assert mvt_pion(board9, (3, 3), (1, 3)) == board9
    assert mvt_pion(board10, (6, 2), (5, 3)) == board10


def test_mvt_pion_poss():
    assert mvt_pion_poss(board2, (0, 7), (0, 6)) == False
    assert mvt_pion_poss(board3, (6, 2), (4, 2)) == False
    assert mvt_pion_poss(board9, (3, 3), (1, 3)) == False
    assert mvt_pion_poss(board10, (6, 2), (5, 3)) == False
    assert mvt_pion_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', 'Rn', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (1, 1), (2, 1)) == True
    assert mvt_pion_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', 'Rn', '  '],
        ['  ', 'Pb', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', '  ', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 2), (4, 1)) == True


def test_mvt_roi_poss():
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', 'Rn', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 6), (3, 7)) == True
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', 'Rn', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 6), (3, 5)) == True
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', 'Rn', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 6), (4, 6)) == True
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', 'Rn', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 6), (2, 6)) == True
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', 'Rn', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 6), (2, 7)) == True
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', 'Rn', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 6), (2, 5)) == True
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', 'Rn', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 6), (4, 5)) == True
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', 'Rn', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (3, 6), (4, 7)) == True
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Rn', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (5, 4), (4, 4)) == False
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Rn', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (5, 4), (6, 4)) == True
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Rn', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (5, 4), (6, 5)) == True
    assert mvt_roi_poss([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Rn', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (5, 4), (6, 3)) == True


def test_mvt_roi():
    assert mvt_roi([
        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Rn', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']], (5, 4), (6, 3)) == [

        ['Tn', '  ', 'Fn', 'Dn', '  ', 'Fn', 'Cn', 'Tn'],
        ['Pn', 'Pn', '  ', 'Pn', 'Pn', 'Pn', 'Pn', 'Pn'],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', 'Pn', '  ', '  ', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', 'Cn', '  ', '  ', '  '],
        ['  ', '  ', '  ', '  ', '  ', '  ', '  ', '  '],
        ['Pb', 'Pb', 'Pb', 'Rn', 'Pb', 'Pb', 'Pb', 'Pb'],
        ['Tb', 'Cb', 'Fb', 'Db', 'Rb', 'Fb', 'Cb', 'Tb']]


def test_sign():
    assert sign(10) == 1
    assert sign(1) == 1
    assert sign(-2) == -1
    assert sign(0.1) == 1
    assert sign(0) == 0
    assert sign(-10) == -1
